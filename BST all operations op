#include <iostream>
using namespace std;
struct node
{
    int data;
    struct node *left;
    struct node *right;
};
void Inorder(struct node *root)
{
    if (root!=NULL)
    {
        Inorder(root->left);
        cout<<root->data<<" ";
        Inorder(root->right);
    }
}
void Preorder(struct node* root)
{
    if(root!=NULL)
    {
        cout<<root->data<<" ";
        Preorder(root->left);
        Preorder(root->right);
    }
}
void Postorder(struct node *root)
{
    if(root!=NULL)
    {
        Postorder(root->left);
        Postorder(root->right);
        cout<<root->data<<" ";
    }
}
void AddNode(struct node *root,int data)
{
    struct node *ptr=(struct node*)malloc(sizeof(struct node));
    ptr->data=data;
    ptr->left=NULL;
    ptr->right=NULL;
    struct node* prev;
    while(root!=NULL)
    {
        prev=root;
        if(root->data==data)
        {
            return;
        }
        else if(root->data>data)
        {
            root=root->left;
        }
        else
        {
            root=root->right;
        }
    }
    if(prev->data>data)
    {
        prev->left=ptr;
    }
    else
    {
        prev->right=ptr;
    }
}
struct node *Searching(struct node * root,int data)
{
    while(root!=NULL)
    {
        if(root->data==data)
        {
            return root;
        }
        else  if(root->data>data)
        {
            root=root->left;
        }
        else
        {
            root=root->right;
        }
    }
    return NULL;
};
static int c1=0,c2=0,c3=0;
int LeafNode(struct node * root)
{
    if(root!=NULL)
    {
        LeafNode(root->left);
        if(root->left==NULL &&root->right==NULL)
        {
            c1++;
        }
        LeafNode(root->right);
    }
    return c1;
}
int NodeWithTwoChild(struct node * root)
{
    if(root!=NULL)
    {
        NodeWithTwoChild(root->left);
        if(root->left!=NULL &&root->right!=NULL)
        {
            c2++;
        }
        NodeWithTwoChild(root->right);
    }
    return c2;
}
int NodeWithOneChild(struct node * root)
{
    if(root!=NULL)
    {
        NodeWithOneChild(root->left);
        if(root->left!=NULL &&root->right==NULL)
        {
            c3++;
        }
        else if(root->right!=NULL && root->left==NULL)
        {
            c3++;
        }
        NodeWithOneChild(root->right);
    }
    return c3;
}
int main()
{
    struct node *root=(struct node*)malloc(sizeof(struct node));
    root->data=10;
    root->left=NULL;
    root->right=NULL;
    AddNode(root,5);
    AddNode(root,32);
    AddNode(root,8);
    AddNode(root,21);
    AddNode(root,2);
    AddNode(root,67);
    AddNode(root,4);
    cout<<"\nInorder : ";
    Inorder(root);
    cout<<"\nPreorder : ";
    Preorder(root);
    cout<<"\nPostorder : ";
    Postorder(root);
    if (Searching(root,67)!=NULL)
    {
        cout<<"FOUND\n";
    }
    else
    {
        cout<<"NOT FOUND\n";
    }
    cout<<LeafNode(root)<<endl;
    cout<<NodeWithTwoChild(root)<<endl;
    cout<<NodeWithOneChild(root);
    return 0;
}
