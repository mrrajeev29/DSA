#include <iostream>
#include <queue>
using namespace std;
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int value) : val(value), left(nullptr), right(nullptr) {}
};
void levelOrderTraversal(TreeNode* root) {
    if (root!=NULL)
    {
        queue<TreeNode*> q;
        q.push(root);
        while (!q.empty()) 
        {
            TreeNode* current = q.front();
            q.pop();
            cout << current->val << " ";
            if (current->left)
                q.push(current->left);
            if (current->right)
                q.push(current->right);
        }
    }
}
int main() {
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);
    cout << "Level-order traversal: ";
    levelOrderTraversal(root);
    return 0;
}







#include <iostream>
using namespace std;
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int value) : val(value), left(nullptr), right(nullptr) {}
};

int height(TreeNode* node) {
    if (node!=NULL)
    {
        int leftHeight = height(node->left);
        int rightHeight = height(node->right);
        return max(leftHeight, rightHeight) + 1;
    }
    return 0;
}

void printGivenLevel(TreeNode* node, int level) {
    if (node!=NULL)
    {
        if (level == 1)
            cout << node->val << " ";
        else  
        {
            printGivenLevel(node->left, level - 1);
            printGivenLevel(node->right, level - 1);
        }
    }
}

void levelOrderTraversal(TreeNode* root) 
{
    int h = height(root);
    for (int i = 1; i <= h; ++i) 
    {
        printGivenLevel(root, i);
    }
}

int main() {
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);

    std::cout << "Level-order traversal: ";
    levelOrderTraversal(root);

    return 0;
}
